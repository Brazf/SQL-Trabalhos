-----------------------------
-- Preparando o Ambiente  --
-----------------------------

-- CRIAÇÃO DA TABELA PROFESSOR
CREATE TABLE professor (
    matricula number(5) PRIMARY KEY,
    nome varchar2(70) NOT NULL,
    sexo char(1),
    estado char(2),
    cidade varchar2(40),
    whatsapp varchar(15),
    data_admissao date default sysdate,
    idade number(3),
    salario number(7,2)
)

-- EXCLUIR TABLE PROFESSOR
DROP TABLE professor;

-- CRIAÇÃO DO SEQUENCE PARA NÚMERO DA MATRÍCULA
CREATE SEQUENCE inserirMatricula
    MINVALUE 1
    MAXVALUE 100
    START WITH 1
    INCREMENT BY 1;

-- EXCLUIR SEQUENCE INSERIRMATRICULA
DROP SEQUENCE inserirMatricula;

-- INSERT PPROFESSOR
-- INSERT 1
INSERT INTO professor (matricula, nome, sexo, estado, cidade, whatsapp, data_admissao, idade, salario) 
VALUES (inserirmatricula.nextval, 'José Almeida e Silva', 'M', 'PE', 'Belo Jardim', '8190990083', '15/08/1997', 63, 6500.00); 
-- INSERT 2
INSERT INTO professor (matricula, nome, sexo, estado, cidade, whatsapp, data_admissao, idade, salario) 
VALUES (inserirmatricula.nextval, 'Amanda da Silva', 'F', 'RJ', 'Rio de Janeiro', '2111970987', '20/07/2005', 40, 1300.00);
-- INSERT 3
INSERT INTO professor (matricula, nome, sexo, estado, cidade, whatsapp, data_admissao, idade, salario) 
VALUES (inserirmatricula.nextval, 'Alessandra Feitosa', 'F', 'PE', 'Belo Jardim', '8118276354', '15/12/2014', 26, 5400.50);
-- INSERT 4
INSERT INTO professor (matricula, nome, sexo, estado, cidade, whatsapp, data_admissao, idade, salario) 
VALUES (inserirmatricula.nextval, 'Fabio Oliveria', 'M', 'SP', 'São Paulo', '1190847563', '07/09/2022', 32, 455.75);
-- INSERT 5
INSERT INTO professor (matricula, nome, sexo, estado, cidade, whatsapp, data_admissao, idade, salario) 
VALUES (inserirmatricula.nextval, 'Gustavo Nogueira', 'M', 'RJ', 'Macaé', '2109863761', '09/08/1998', 22, 1250.15);
-- INSERT 6
INSERT INTO professor (matricula, nome, sexo, estado, cidade, whatsapp, data_admissao, idade, salario) 
VALUES (inserirmatricula.nextval, 'Ana Conceição Moura', 'F', 'MA', 'São Luís', '9919287364', '10/02/2020', 39, 1700.00);
-- INSERT 7
INSERT INTO professor (matricula, nome, sexo, estado, cidade, whatsapp, data_admissao, idade, salario) 
VALUES (inserirmatricula.nextval, 'Tomás Abdias Santos', 'M', 'MG', 'Belo Horizonte', '3187630986', '28/07/2020', 28, 2301.56);
-- INSERT 8
INSERT INTO professor (matricula, nome, sexo, estado, cidade, whatsapp, data_admissao, idade, salario) 
VALUES (inserirmatricula.nextval, 'Josefa Meira Morais', 'F', 'PA', 'Belém', '9157689302', '11/05/2004', 59, 10600.99);

-- SELECT PROFESSOR
SELECT * FROM professor;

----------------------
-- Assunto: Views  --
----------------------

-- Questão 01

-- CRIAÇÃO DA VIEW
CREATE VIEW view_questao1 as
SELECT nome, salario, whatsapp
FROM professor
WHERE salario > (SELECT AVG(salario) FROM professor) 
AND whatsapp NOT LIKE '81%'
ORDER BY nome ASC;

/* Código sql para visualizar a view acima */
SELECT * FROM view_questao1;

/* Código SQL para remover a view acima */
DROP VIEW view_questao1;

-- Questão 02

/* Criar uma view que exiba a maior idade dos professores por estado */
CREATE VIEW view_questao2 as
SELECT estado, MAX(idade) as MAIOR_IDADE_POR_ESTADO 
FROM professor
GROUP BY estado;

/* Código sql para visualizar a view acima */
SELECT * FROM view_questao2;

--------------------------------------
-- Assunto: Subconsultas avançadas
--------------------------------------

-- Questão 03

/* Exibir os professores com idade entre a menor idade e 35, em ordem
crescente de idade */
SELECT nome, idade
FROM professor
WHERE idade BETWEEN (SELECT MIN(idade) FROM professor) AND 39
ORDER BY idade ASC;

-- Questão 04

/* Atualizar o salário do professor com a maior idade para que tenha também o
maior salário */
UPDATE professor 
SET salario = (SELECT MAX(SALARIO) FROM professor)
WHERE idade = (SELECT MAX(idade) FROM professor);

/* Select mostrando os novos salários */
SELECT * FROM professor;

--------------------------------------
-- Assunto: Funções Oracle -- 
--------------------------------------

-- Questão 05

/* Mostrar os professores em ordem alfabética, bem como os seus salários
arredondados com apenas uma casa decimal. Outrossim, na exibição desta
consulta, dever-se-á converter o nome do professor, de forma que o primeiro
caractere de cada palavra esteja em maiúscula, e o restante em minúscula */
SELECT nome, INITCAP(nome)"Nome", ROUND(salario,1) AS salario_1_casa_arredondado
FROM professor
ORDER BY nome ASC;

-- Questão 06

/* Mostrar os professores, e suas respectivas datas de admissão, mas apenas
dos docentes cujo ano de admissão é diferente de 2020 */
SELECT nome, data_admissao
FROM professor
WHERE EXTRACT(year from data_admissao) NOT LIKE '2020';

----------------------------------------
-- Assunto: Restrições de Integridade --
----------------------------------------

-- Questão 07
/* Criar as tabelas academia (codigo, nome) e instrutor (codigo, nome, salario,
idade, cidade, estado, graduacao, codigo_academia) de modo que as Restrições
de Domínio (envolvendo os campos salario, idade e graduação), de Chave, de
Entidade, e de Integridade Referencial sejam respeitadas. */

-- CRIAÇÃO TABLE ACADEMIA
CREATE TABLE academia (
    codigo_academia number(3) NOT NULL PRIMARY KEY,
    nome varchar(70)
)

-- SELECT TABLE ACADEMIA
SELECT * FROM academia;

-- DROP TABLE ACADEMIA
DROP TABLE academia;

-- CRIAÇÃO TABLE INSTRUTOR
CREATE TABLE instrutor(
    codigo_instrutor number(3) NOT NULL PRIMARY KEY,
    nome varchar(70),
    salario number(7,2)
        CHECK( salario > 0),
    idade number(3)
        CHECK(idade BETWEEN 18 AND 100),
    cidade varchar(70),
    estado char(2),
    graduacao varchar(70)
        CHECK(graduacao IN('Educação Física')),
    codigo_academia number(3),
    FOREIGN KEY (codigo_academia) REFERENCES academia (codigo_academia)
)

-- DROP TABLE INSTRUTOR
DROP TABLE instrutor;

-- SELECT TABLE INSTRUTOR
SELECT * FROM instrutor;

/* Testar cada Restrição de Integridade indicada acima*/

-- TESTE DE RESTRIÇÕES DE INTEGRIDADE DE DOMÍNIO
-- 1° INSERT ACADEMIA
INSERT INTO academia (codigo_academia, nome) VALUES (001, 'Academia Bem Estar');
-- 2° INSERT INSTRUTOR (CERTO)
INSERT INTO instrutor (codigo_instrutor, nome, salario, idade, cidade, estado, graduacao, codigo_academia)
VALUES (123, 'Fábio Braz', 1500.00, 25, 'Buíque', 'PE', 'Educação Física', 001);
-- 3° INSERT INSTRUTOR (ERRADO) error de restrição de domínio (idade errada não podendo ser menor que 18 anos)
INSERT INTO instrutor (codigo_instrutor, nome, salario, idade, cidade, estado, graduacao, codigo_academia)
VALUES (124, 'Carlos Veraz', 2500.00, 15, 'Belo Jardim', 'PE', 'Educação Física', 001);

-- TESTE DE RESTRIÇÕES DE INTEGRIDADE DE CHAVE
-- INSERT ADICIONANDO UM ACADEMIA JÁ EXISTE (ERRADO) erro de restrição de chave ( chave primary key já existente )
INSERT INTO academia (codigo_academia, nome) VALUES (001, 'Academia Bem Estar');

-- TESTE DE RESTRIÇÕES DE INTEGRIDADE DE ENTIDADE
/* 1° INSERT ADICIONANDO UM ACADEMIA COM VALOR NULLO NO SEU CÓDIGO (ERRADO)
erro de restrição de entidade ( chave primary key não pode ser nula )*/
INSERT INTO academia (codigo_academia, nome) VALUES (null, 'Academia Portas Abertas');
/* 2° INSERT ADICIONANDO UM ACADEMIA SEM VALOR NO SEU CÓDIGO */
INSERT INTO academia (codigo_academia, nome) VALUES ('Academia Portas Abertas');

-- TESTE DE RESTRIÇÕES DE INTEGRIDADE REFERENCIAL
/* INSERT ADICIONANDO UM INSTRUTOR COM UMA CHAVE ESTRANGEIRA INEXISTENTE (ERRADO)
Erro de integridade referencial ( a chave estrangeira passada está errada, portanto não há uma referencia entre as tabelas) */
INSERT INTO instrutor (codigo_instrutor, nome, salario, idade, cidade, estado, graduacao, codigo_academia)
VALUES (124, 'Carlos Veraz', 2500.00, 29, 'Belo Jardim', 'PE', 'Educação Física', 002);

------------------------------------
-- Assunto: PL - SQL - Functions ---
------------------------------------

-- Questão 08

/* Criar uma function que retorne o valor em euro de forma arredondada em duas
casas decimais, dada a cotação do euro e o valor em reais */

-- CRIANDO A FUNCTION COTACAO
CREATE OR REPLACE function valorEmEuro(reais in number, cotacao in number)
RETURN number
IS
BEGIN
    return (reais/cotacao);
END;

-- DROP FUNCTION COTACAO
DROP FUNCTION cotacao;

/* Visualizar o resultado da aplicação da função anterior*/
SELECT ROUND(valorEmEuro(20,5.09), 2) "Valor em Euros" FROM dual;


------------------------------------
-- Assunto: PL - SQL - Procedures --
------------------------------------

-- Questão 09

/* Criar uma procedure para aumentar o salário dos professores, dado um
percentual de aumento */

-- SELECT PROFESSOR
SELECT * FROM professor;

-- CREATE PROCEDURE aumentoSalarial
CREATE OR REPLACE procedure aumentoSalarial(porcentagem number)
IS
BEGIN
    update professor set salario = salario * ( 1 + (porcentagem / 100) );
END;

-- DROP PROCEDURE aumentoSalarial
DROP PROCEDURE aumentoSalarial;

/* Executar a procedure anterior*/
EXEC aumentoSalarial(10);

-- Questão 10

/* Criar uma procedure para atualizar cidade e estado dos professores */

-- SELECT PROFESSOR
SELECT * FROM professor;

-- CRIANDO PROCEDURE atualizarEndereco
CREATE OR REPLACE procedure atualizarEndereco(states char, city varchar)
IS
BEGIN
    update professor set estado = states;
    update professor set cidade = city;
END;

-- DROP PROCEDURE atualizarEndereco
DROP PROCEDURE atualizarEndereco;

/* Executar a procedure anterior */

EXEC atualizarEndereco('PE', 'Belo Jardim');